c
display end_pos
c
end_pos
c
display @color
c
display @color
exit
end_pos
c
display @color
exit
display @color
n
c
exit
n
c
display @color
c
exit
c
display @color
c
exit
n
exit
n
exit
end_pos
start_pos
n
exit
n
exit
@current_player
n
exit
[step1] + [step2]
[step1] + [step2[
step1 + step2
[step1, step2]
c
display step2
display step1
exit
forward_steps + side_attacks
side_attacks
forward_steps
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
display out
out
n
c
out
n
c
n
out
n
attacks
c
display @pos
display end_pos
c
exit
self
moves
end_pos
c
display @pos
c
display @pos
c
self.pos
n
self.valid_moves
n
self.pos
self.valid_moves
c
self.valid_moves
n
self.valid_moves
c
self.valid_moves
c
self.valid_moves
exit
n
test_board.in_check?(@color)
test_board.render
n
test_board.render
exit
test_board.render
exit
end_pos
start_pos
s
n
moves
n
end_pos
start_pos
n
s
exit
c
n
end_pos
start_pos
n
s
n
exit
self
end_pos
start_pos
color
s
test_board[pos]
n
test_board[pos]
n
moves
end_pos
test_board[@pos]
@pos
test_board
n
exit
n
new_pos
n
diff
n
out
n
[step1] + [step2]
step2
step1
n
step1
n
exit
step1
@board[step1]
n
y
x
n
c
exit
self
self.board
c
n
piece.moves(self)
n
out
n
s
end_pos
start_pos
exit
@board
exit
self.color
@board[move].color
board[move].color
r = board[move]
@board[move]
c
exit
n
s
@board.valid_pos?(move)
move
exit
s
display out
move
s
move
s
move
s
move
s
direction
c
direction
exit
c
n
c
n
c
display out
c
exit
continue 38
n
out
n
out
n
move
n
s
out
s
out
s
n
move
n
s
display out
c
exit
s
piece
s
display c
display r
c
r
s
display @null_piece
display end_pos
display start_pos
